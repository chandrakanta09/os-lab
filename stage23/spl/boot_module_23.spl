//int7
loadi(16, 29);
loadi(17, 30);

//int10
loadi(22, 35);
loadi(23, 36);

//exception
loadi(2, 15);
loadi(3, 16);

//timer
loadi(4, 17);
loadi(5, 18);

//library
loadi(63, 13);
loadi(64, 14);

//init
loadi(65, 7);
loadi(66, 8);

//module 5 aka scheduler
loadi(50, 63);
loadi(51, 64);

//module 0 aka Resource manager
loadi(40, 53);
loadi(41, 54);

//module 4 aka Device Manager
loadi(48, 61);
loadi(49, 62);

//module 1 aka Process Manager
loadi(42, 55);
loadi(43, 56);

//module 2 aka Memory Manager
loadi(44, 57);
loadi(45, 58);

//int6 (read)
loadi(14, 27);
loadi(15, 28);

//int=console
loadi(8, 21);
loadi(9, 22);

//int9 (exec)
loadi(20, 33);
loadi(21, 34);

//int=disk
loadi(6,19);
loadi(7,20);

//load inode table
loadi(59, 3);
loadi(60, 4);

//load the disk free list
loadi(61, 2);

//load int8 (fork)
loadi(18, 31);
loadi(19, 32);

//load int11 (wait, signal, getpid, getppid)
loadi(24, 37);
loadi(25, 38);

//load int15 (shutdown)
loadi(32, 45);
loadi(33, 46);

//load int13 (Semget and semrelease)
loadi(28, 41);
loadi(29, 42);

//load int14 (Semlock kand semunlock)
loadi(30, 43);
loadi(31, 44);

//load int4 (create and delete)
loadi(10, 23);
loadi(11, 24);

//root file
loadi(62, 5);

//initialize Terminal Status table
[TERMINAL_STATUS_TABLE] = 0;

//initialize Disk status tabel
[DISK_STATUS_TABLE + 0] = 0;

//initialize semaphore table
alias i R0;
i = 0;
while( (i < MAX_SEM_COUNT) ) do
	[SEMAPHORE_TABLE + i*4 + 0] = -1;
	[SEMAPHORE_TABLE + i*4 + 1] =  0;
	i = i + 1;
endwhile;

//initialize file status table
R0 = 0;
while( (R0 < MAX_FILE_NUM) ) do
	[FILE_STATUS_TABLE + (R0)*4 + 0] = -1;
	[FILE_STATUS_TABLE + (R0)*4 + 1] = -1;
	R0 = R0 + 1;
endwhile;

//initialize buffer table
R0 = 0;
while( (R0 < MAX_BUFFER) ) do
	[BUFFER_TABLE + (R0)*4 + 0] = -1;
	[BUFFER_TABLE + (R0)*4 + 1] = 0;
	[BUFFER_TABLE + (R0)*4 + 2] = -1;
	R0 = R0 + 1;
endwhile;

//------------------------------------------
//init mem location (65, 66)
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;
//lib
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//-------------------------------------------
//Process Table
//init -> PROCESS_TABLE+16
[(PROCESS_TABLE+16) + 1] = 1; // PID
[(PROCESS_TABLE+16) + 3] = 1; // userID = root
[(PROCESS_TABLE+16) + 4] = CREATED; // STATE
[(PROCESS_TABLE+16) + 11] = 80; // init userArea page
[(PROCESS_TABLE+16) + 12] = 0; // KPTR
[(PROCESS_TABLE+16) + 13] = 8*512; // UPTR
[(PROCESS_TABLE+16) + 14] = PAGE_TABLE_BASE+20;
[(PROCESS_TABLE+16) + 15] = 10;
[76*512] = [65*512+1];

//-------------------------------------------
//disk_map_table for init process
[DISK_MAP_TABLE + 10*1 + 0] = 80; //user are page
[DISK_MAP_TABLE + 10*1 + 1] = -1;
[DISK_MAP_TABLE + 10*1 + 2] = 78; //Heap
[DISK_MAP_TABLE + 10*1 + 3] = 79;
[DISK_MAP_TABLE + 10*1 + 4] = 65; //code
[DISK_MAP_TABLE + 10*1 + 5] = 66;
[DISK_MAP_TABLE + 10*1 + 6] = -1;
[DISK_MAP_TABLE + 10*1 + 7] = -1;
[DISK_MAP_TABLE + 10*1 + 8] = 76; //stack
[DISK_MAP_TABLE + 10*1 + 9] = 77;


//-------------------------------------------
//Per process resource table of init process
R0 = 496;
while( (R0 < 512) ) do
	[80*512 + R0] = -1;
	R0 = R0+1;
endwhile;

//--------------------------------------------
//Initialize memory free list
alias mem_free_list R1;
mem_free_list = 0;
while( (mem_free_list < MAX_MEM_PAGE) ) do
	if( (mem_free_list < 83) ) then
		[MEMORY_FREE_LIST + mem_free_list] = 1;
	else
		[MEMORY_FREE_LIST + mem_free_list] = 0;
	endif;
	mem_free_list = mem_free_list + 1;
endwhile;
//initialize file status table
R0 = 0;
while( (R0 < MAX_FILE_NUM) ) do
	[FILE_STATUS_TABLE + (R0)*4 + 0] = -1;
	[FILE_STATUS_TABLE + (R0)*4 + 1] = -1;
	R0 = R0 + 1;
endwhile;

//--------------------------------------------
//WAIT_MEM_COUNT and MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 3] = 0; // wait mem count
[SYSTEM_STATUS_TABLE + 2] = (127 - 83 + 1); //127 to 83

//--------------------------------------------
// set all other states to TERMINATED
[(PROCESS_TABLE+(16*2)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*3)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*4)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*5)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*6)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*7)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*8)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*9)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*10)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*11)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*12)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*13)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*14)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*15)) + 4] = TERMINATED;

return;
