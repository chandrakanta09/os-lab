//RESOURCE MANAGER MODULE
//-----------------------
alias functionNum R1;
alias currentPID R2;
alias returnVal R0;

if( (functionNum == ACQUIRE_SEMAPHORE) ) then
	//arguments - PID
	alias i R3;
	alias found R4;
	found = 0;
	i = 0;
	while( (i < MAX_SEM_COUNT) ) do
		if( ([SEMAPHORE_TABLE + i*4 + 1] == 0) ) then
			found = 1;
			[SEMAPHORE_TABLE + i*4 + 1] = 1;
			[SEMAPHORE_TABLE + i*4 + 0] = -1;
			break;
		endif;
		i = i + 1;
	endwhile;
	if(found == 0) then
		R0 = -1;
		return;
	endif;
	R0 = i;
	return;
endif;

if( (functionNum == RELEASE_SEMAPHORE) ) then
	alias semTableIdx R2;
	alias PID R3;
	if( ([SEMAPHORE_TABLE + semTableIdx*4 + 0] == PID) ) then
		//here semaphore is locked so we will unlock it
		[SEMAPHORE_TABLE + semTableIdx*4 + 0] = -1;
		//waek up blocked processes
		alias i R5;
		i = 1;
		while( (i < MAX_PROC_NUM) ) do
			if( ([PROCESS_TABLE + i*16 + 4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE + i*16 + 5] == semTableIdx) ) then
				[PROCESS_TABLE + i*16 + 4] = READY;
			endif;
			i = i + 1;
		endwhile;
	endif;
	[SEMAPHORE_TABLE + semTableIdx*4 + 1] = [SEMAPHORE_TABLE + semTableIdx*4 + 1] - 1;
	return;
endif;

if( (functionNum == ACQUIRE_DISK) ) then
	while( [DISK_STATUS_TABLE+0] == 1 ) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
		multipush(R0, R1, R2, R3, R4, R5);
		call MOD_5;
		multipop(R0, R1, R2, R3, R4, R5);
	endwhile;

	[DISK_STATUS_TABLE + 0] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;
	return;
endif;

if( (functionNum == ACQUIRE_TERMINAL) ) then
	while( [TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
		call MOD_5;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
	endwhile;

	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE+1] = currentPID;
	return;
endif;

if( (functionNum == RELEASE_TERMINAL) ) then
	if( (currentPID != [TERMINAL_STATUS_TABLE+1]) ) then
		returnVal = -1;
		return;
	endif;

	[TERMINAL_STATUS_TABLE] = 0;
	alias i R3;
	i = 1;
	while( (i < 16) ) do
		if([PROCESS_TABLE + i*16 + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + i*16 + 4] = READY;
		endif;
		i = i + 1;
	endwhile;
	returnVal = 0; // R0 will have 0
	return;
endif;

return;
