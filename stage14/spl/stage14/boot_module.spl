//int7
loadi(16, 29);
loadi(17, 30);

//int10
loadi(22, 35);
loadi(23, 36);

//exception
loadi(2, 15);
loadi(3, 16);

//timer
loadi(4, 17);
loadi(5, 18);

//library
loadi(63, 13);
loadi(64, 14);

//init
loadi(65, 7);
loadi(66, 8);

//new code even.xsm
loadi(83, 69);
//new code odd.xsm
loadi(89, 70);

//module 5 aka scheduler
loadi(50, 63);
loadi(51, 64);

//------------------------------------------
//init mem location (65, 66)
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;
//lib
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//-------------------------------------------
//Process Table
//init -> PROCESS_TABLE+16
[(PROCESS_TABLE+16) + 1] = 1; // PID
[(PROCESS_TABLE+16) + 4] = CREATED; // STATE
[(PROCESS_TABLE+16) + 11] = 80; // init userArea page
[(PROCESS_TABLE+16) + 12] = 0; // KPTR
[(PROCESS_TABLE+16) + 13] = 8*512; // UPTR
[(PROCESS_TABLE+16) + 14] = PAGE_TABLE_BASE+20;
[(PROCESS_TABLE+16) + 15] = 10;
[76*512] = [65*512+1];

//--------------------------------------------
//even code mem location 83
PTBR = PAGE_TABLE_BASE+20+20;
PTLR = 10;
//lib
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 84;
[PTBR+5] = "0110";
[PTBR+6] = 85;
[PTBR+7] = "0110";

//code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = 87;
[PTBR+19] = "0110";

//-------------------------------------------
//Process Table
//even new code -> PROCESS_TABLE+16+16
[(PROCESS_TABLE+16+16) + 1] = 2; // PID
[(PROCESS_TABLE+16+16) + 4] = CREATED; // STATE
[(PROCESS_TABLE+16+16) + 11] = 88; // even userArea page
[(PROCESS_TABLE+16+16) + 12] = 0; // KPTR
[(PROCESS_TABLE+16+16) + 13] = 8*512; // UPTR
[(PROCESS_TABLE+16+16) + 14] = PAGE_TABLE_BASE+20+20;
[(PROCESS_TABLE+16+16) + 15] = 10;
[86*512] = [83*512+1];

//--------------------------------------------
//odd code mem location 89
PTBR = PAGE_TABLE_BASE+20+20+20;
PTLR = 10;
//lib
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 90;
[PTBR+5] = "0110";
[PTBR+6] = 91;
[PTBR+7] = "0110";

//code
[PTBR+8] = 89;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 92;
[PTBR+17] = "0110";
[PTBR+18] = 93;
[PTBR+19] = "0110";

//-------------------------------------------
//Process Table
//odd new code -> PROCESS_TABLE+16*3
[(PROCESS_TABLE+16*3) + 1] = 3; // PID
[(PROCESS_TABLE+16*3) + 4] = CREATED; // STATE
[(PROCESS_TABLE+16*3) + 11] = 94; // odd userArea page
[(PROCESS_TABLE+16*3) + 12] = 0; // KPTR
[(PROCESS_TABLE+16*3) + 13] = 8*512; // UPTR
[(PROCESS_TABLE+16*3) + 14] = PAGE_TABLE_BASE+20+20+20;
[(PROCESS_TABLE+16*3) + 15] = 10;
[92*512] = [89*512+1];

// set all other states to TERMINATED
[(PROCESS_TABLE+(16*4)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*5)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*6)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*7)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*8)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*9)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*10)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*11)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*12)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*13)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*14)) + 4] = TERMINATED;
[(PROCESS_TABLE+(16*15)) + 4] = TERMINATED;

return;
